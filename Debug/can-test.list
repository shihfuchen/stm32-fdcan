
can-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ddc  08002ddc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ddc  08002ddc  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ddc  08002ddc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de0  08002de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000001c  08002e00  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002e00  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000850c  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001737  00000000  00000000  0002859b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00029cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000065b  00000000  00000000  0002a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c84  00000000  00000000  0002abc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008b31  00000000  00000000  0004e847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e441f  00000000  00000000  00057378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021ec  00000000  00000000  0013b798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0013d984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002da4 	.word	0x08002da4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	08002da4 	.word	0x08002da4

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fb94 	bl	800094a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f8d3 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9ad 	bl	8000584 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800022a:	f000 f91b 	bl	8000464 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800022e:	f000 f961 	bl	80004f4 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000232:	4b61      	ldr	r3, [pc, #388]	; (80003b8 <main+0x1a0>)
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8000238:	4b5f      	ldr	r3, [pc, #380]	; (80003b8 <main+0x1a0>)
 800023a:	2200      	movs	r2, #0
 800023c:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800023e:	4b5e      	ldr	r3, [pc, #376]	; (80003b8 <main+0x1a0>)
 8000240:	2202      	movs	r2, #2
 8000242:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000244:	4b5c      	ldr	r3, [pc, #368]	; (80003b8 <main+0x1a0>)
 8000246:	2201      	movs	r2, #1
 8000248:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x111;
 800024a:	4b5b      	ldr	r3, [pc, #364]	; (80003b8 <main+0x1a0>)
 800024c:	f240 1211 	movw	r2, #273	; 0x111
 8000250:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000252:	4b59      	ldr	r3, [pc, #356]	; (80003b8 <main+0x1a0>)
 8000254:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000258:	615a      	str	r2, [r3, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800025a:	4957      	ldr	r1, [pc, #348]	; (80003b8 <main+0x1a0>)
 800025c:	4857      	ldr	r0, [pc, #348]	; (80003bc <main+0x1a4>)
 800025e:	f000 fe4f 	bl	8000f00 <HAL_FDCAN_ConfigFilter>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <main+0x54>
  {
    Error_Handler();
 8000268:	f000 fa06 	bl	8000678 <Error_Handler>
  }
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 800026c:	4952      	ldr	r1, [pc, #328]	; (80003b8 <main+0x1a0>)
 800026e:	4854      	ldr	r0, [pc, #336]	; (80003c0 <main+0x1a8>)
 8000270:	f000 fe46 	bl	8000f00 <HAL_FDCAN_ConfigFilter>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <main+0x66>
  {
    Error_Handler();
 800027a:	f000 f9fd 	bl	8000678 <Error_Handler>
  }

  /* Configure global filter on both FDCAN instances:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 800027e:	2300      	movs	r3, #0
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2300      	movs	r3, #0
 8000284:	2202      	movs	r2, #2
 8000286:	2102      	movs	r1, #2
 8000288:	484c      	ldr	r0, [pc, #304]	; (80003bc <main+0x1a4>)
 800028a:	f000 fe93 	bl	8000fb4 <HAL_FDCAN_ConfigGlobalFilter>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <main+0x80>
  {
    Error_Handler();
 8000294:	f000 f9f0 	bl	8000678 <Error_Handler>
  }
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000298:	2300      	movs	r3, #0
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2300      	movs	r3, #0
 800029e:	2202      	movs	r2, #2
 80002a0:	2102      	movs	r1, #2
 80002a2:	4847      	ldr	r0, [pc, #284]	; (80003c0 <main+0x1a8>)
 80002a4:	f000 fe86 	bl	8000fb4 <HAL_FDCAN_ConfigGlobalFilter>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <main+0x9a>
  {
    Error_Handler();
 80002ae:	f000 f9e3 	bl	8000678 <Error_Handler>
  }
  /* Activate Rx FIFO 0 new message notification on both FDCAN instances */
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_TX_FIFO_EMPTY , 0) != HAL_OK)
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b8:	4840      	ldr	r0, [pc, #256]	; (80003bc <main+0x1a4>)
 80002ba:	f001 f863 	bl	8001384 <HAL_FDCAN_ActivateNotification>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <main+0xb0>
  {
    Error_Handler();
 80002c4:	f000 f9d8 	bl	8000678 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80002c8:	2200      	movs	r2, #0
 80002ca:	2101      	movs	r1, #1
 80002cc:	483b      	ldr	r0, [pc, #236]	; (80003bc <main+0x1a4>)
 80002ce:	f001 f859 	bl	8001384 <HAL_FDCAN_ActivateNotification>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <main+0xc4>
  {
    Error_Handler();
 80002d8:	f000 f9ce 	bl	8000678 <Error_Handler>
  }
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80002dc:	2200      	movs	r2, #0
 80002de:	2101      	movs	r1, #1
 80002e0:	4837      	ldr	r0, [pc, #220]	; (80003c0 <main+0x1a8>)
 80002e2:	f001 f84f 	bl	8001384 <HAL_FDCAN_ActivateNotification>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <main+0xd8>
  {
    Error_Handler();
 80002ec:	f000 f9c4 	bl	8000678 <Error_Handler>
  }

  /* Prepare Tx message Header */
  TxHeader.Identifier = 0x111;
 80002f0:	4b34      	ldr	r3, [pc, #208]	; (80003c4 <main+0x1ac>)
 80002f2:	f240 1211 	movw	r2, #273	; 0x111
 80002f6:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80002f8:	4b32      	ldr	r3, [pc, #200]	; (80003c4 <main+0x1ac>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80002fe:	4b31      	ldr	r3, [pc, #196]	; (80003c4 <main+0x1ac>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_16;
 8000304:	4b2f      	ldr	r3, [pc, #188]	; (80003c4 <main+0x1ac>)
 8000306:	220a      	movs	r2, #10
 8000308:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800030a:	4b2e      	ldr	r3, [pc, #184]	; (80003c4 <main+0x1ac>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000310:	4b2c      	ldr	r3, [pc, #176]	; (80003c4 <main+0x1ac>)
 8000312:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000316:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000318:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <main+0x1ac>)
 800031a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800031e:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000320:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <main+0x1ac>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000326:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <main+0x1ac>)
 8000328:	2200      	movs	r2, #0
 800032a:	621a      	str	r2, [r3, #32]

  /* Configure and enable Tx Delay Compensation, required for BRS mode.
     TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
     TdcFilter default recommended value: 0 */
  if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, 5, 0) != HAL_OK)
 800032c:	2200      	movs	r2, #0
 800032e:	2105      	movs	r1, #5
 8000330:	4822      	ldr	r0, [pc, #136]	; (80003bc <main+0x1a4>)
 8000332:	f000 fe70 	bl	8001016 <HAL_FDCAN_ConfigTxDelayCompensation>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <main+0x128>
  {
    Error_Handler();
 800033c:	f000 f99c 	bl	8000678 <Error_Handler>
  }
  if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan2, 5, 0) != HAL_OK)
 8000340:	2200      	movs	r2, #0
 8000342:	2105      	movs	r1, #5
 8000344:	481e      	ldr	r0, [pc, #120]	; (80003c0 <main+0x1a8>)
 8000346:	f000 fe66 	bl	8001016 <HAL_FDCAN_ConfigTxDelayCompensation>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <main+0x13c>
  {
    Error_Handler();
 8000350:	f000 f992 	bl	8000678 <Error_Handler>
  }
  if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 8000354:	4819      	ldr	r0, [pc, #100]	; (80003bc <main+0x1a4>)
 8000356:	f000 fe80 	bl	800105a <HAL_FDCAN_EnableTxDelayCompensation>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <main+0x14c>
  {
    Error_Handler();
 8000360:	f000 f98a 	bl	8000678 <Error_Handler>
  }
  if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan2) != HAL_OK)
 8000364:	4816      	ldr	r0, [pc, #88]	; (80003c0 <main+0x1a8>)
 8000366:	f000 fe78 	bl	800105a <HAL_FDCAN_EnableTxDelayCompensation>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <main+0x15c>
  {
    Error_Handler();
 8000370:	f000 f982 	bl	8000678 <Error_Handler>
  }

  /* Start the FDCAN module on both FDCAN instances */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000374:	4811      	ldr	r0, [pc, #68]	; (80003bc <main+0x1a4>)
 8000376:	f000 fe91 	bl	800109c <HAL_FDCAN_Start>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <main+0x16c>
  {
    Error_Handler();
 8000380:	f000 f97a 	bl	8000678 <Error_Handler>
  }
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8000384:	480e      	ldr	r0, [pc, #56]	; (80003c0 <main+0x1a8>)
 8000386:	f000 fe89 	bl	800109c <HAL_FDCAN_Start>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <main+0x17c>
  {
    Error_Handler();
 8000390:	f000 f972 	bl	8000678 <Error_Handler>
  }
  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <main+0x1b0>)
 8000396:	490b      	ldr	r1, [pc, #44]	; (80003c4 <main+0x1ac>)
 8000398:	4808      	ldr	r0, [pc, #32]	; (80003bc <main+0x1a4>)
 800039a:	f000 fea7 	bl	80010ec <HAL_FDCAN_AddMessageToTxFifoQ>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <main+0x190>
  {
    Error_Handler();
 80003a4:	f000 f968 	bl	8000678 <Error_Handler>
  }
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2102      	movs	r1, #2
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f001 fcbc 	bl	8001d2c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <main+0x19c>
 80003b6:	bf00      	nop
 80003b8:	20000100 	.word	0x20000100
 80003bc:	20000038 	.word	0x20000038
 80003c0:	2000009c 	.word	0x2000009c
 80003c4:	20000118 	.word	0x20000118
 80003c8:	20000000 	.word	0x20000000

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b094      	sub	sp, #80	; 0x50
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0318 	add.w	r3, r7, #24
 80003d6:	2238      	movs	r2, #56	; 0x38
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f002 fcb6 	bl	8002d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003f2:	f001 fcb3 	bl	8001d5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000400:	2340      	movs	r3, #64	; 0x40
 8000402:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000404:	2302      	movs	r3, #2
 8000406:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000408:	2302      	movs	r3, #2
 800040a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800040c:	2301      	movs	r3, #1
 800040e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000410:	230a      	movs	r3, #10
 8000412:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000414:	2302      	movs	r3, #2
 8000416:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000418:	2302      	movs	r3, #2
 800041a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800041c:	2302      	movs	r3, #2
 800041e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000420:	f107 0318 	add.w	r3, r7, #24
 8000424:	4618      	mov	r0, r3
 8000426:	f001 fd4d 	bl	8001ec4 <HAL_RCC_OscConfig>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000430:	f000 f922 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000434:	230f      	movs	r3, #15
 8000436:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000438:	2303      	movs	r3, #3
 800043a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2102      	movs	r1, #2
 800044c:	4618      	mov	r0, r3
 800044e:	f002 f84b 	bl	80024e8 <HAL_RCC_ClockConfig>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000458:	f000 f90e 	bl	8000678 <Error_Handler>
  }
}
 800045c:	bf00      	nop
 800045e:	3750      	adds	r7, #80	; 0x50
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000468:	4b20      	ldr	r3, [pc, #128]	; (80004ec <MX_FDCAN1_Init+0x88>)
 800046a:	4a21      	ldr	r2, [pc, #132]	; (80004f0 <MX_FDCAN1_Init+0x8c>)
 800046c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800046e:	4b1f      	ldr	r3, [pc, #124]	; (80004ec <MX_FDCAN1_Init+0x88>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000474:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <MX_FDCAN1_Init+0x88>)
 8000476:	f44f 7240 	mov.w	r2, #768	; 0x300
 800047a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_FDCAN1_Init+0x88>)
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_FDCAN1_Init+0x88>)
 8000484:	2201      	movs	r2, #1
 8000486:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_FDCAN1_Init+0x88>)
 800048a:	2201      	movs	r2, #1
 800048c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <MX_FDCAN1_Init+0x88>)
 8000490:	2200      	movs	r2, #0
 8000492:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <MX_FDCAN1_Init+0x88>)
 8000496:	2201      	movs	r2, #1
 8000498:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_FDCAN1_Init+0x88>)
 800049c:	2210      	movs	r2, #16
 800049e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_FDCAN1_Init+0x88>)
 80004a2:	223f      	movs	r2, #63	; 0x3f
 80004a4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_FDCAN1_Init+0x88>)
 80004a8:	2210      	movs	r2, #16
 80004aa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_FDCAN1_Init+0x88>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_FDCAN1_Init+0x88>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_FDCAN1_Init+0x88>)
 80004ba:	2205      	movs	r2, #5
 80004bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_FDCAN1_Init+0x88>)
 80004c0:	2204      	movs	r2, #4
 80004c2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 5;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_FDCAN1_Init+0x88>)
 80004c6:	2205      	movs	r2, #5
 80004c8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_FDCAN1_Init+0x88>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_FDCAN1_Init+0x88>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_FDCAN1_Init+0x88>)
 80004d8:	f000 fbb8 	bl	8000c4c <HAL_FDCAN_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80004e2:	f000 f8c9 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000038 	.word	0x20000038
 80004f0:	40006400 	.word	0x40006400

080004f4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80004f8:	4b20      	ldr	r3, [pc, #128]	; (800057c <MX_FDCAN2_Init+0x88>)
 80004fa:	4a21      	ldr	r2, [pc, #132]	; (8000580 <MX_FDCAN2_Init+0x8c>)
 80004fc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80004fe:	4b1f      	ldr	r3, [pc, #124]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000506:	f44f 7240 	mov.w	r2, #768	; 0x300
 800050a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_FDCAN2_Init+0x88>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000514:	2201      	movs	r2, #1
 8000516:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <MX_FDCAN2_Init+0x88>)
 800051a:	2201      	movs	r2, #1
 800051c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000520:	2200      	movs	r2, #0
 8000522:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000526:	2201      	movs	r2, #1
 8000528:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 16;
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_FDCAN2_Init+0x88>)
 800052c:	2210      	movs	r2, #16
 800052e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 63;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000532:	223f      	movs	r2, #63	; 0x3f
 8000534:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 16;
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000538:	2210      	movs	r2, #16
 800053a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_FDCAN2_Init+0x88>)
 800053e:	2201      	movs	r2, #1
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000544:	2204      	movs	r2, #4
 8000546:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 5;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_FDCAN2_Init+0x88>)
 800054a:	2205      	movs	r2, #5
 800054c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000550:	2204      	movs	r2, #4
 8000552:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 5;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000556:	2205      	movs	r2, #5
 8000558:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_FDCAN2_Init+0x88>)
 800055c:	2200      	movs	r2, #0
 800055e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000562:	2200      	movs	r2, #0
 8000564:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_FDCAN2_Init+0x88>)
 8000568:	f000 fb70 	bl	8000c4c <HAL_FDCAN_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8000572:	f000 f881 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000009c 	.word	0x2000009c
 8000580:	40006800 	.word	0x40006800

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <MX_GPIO_Init+0x78>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a17      	ldr	r2, [pc, #92]	; (80005fc <MX_GPIO_Init+0x78>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <MX_GPIO_Init+0x78>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <MX_GPIO_Init+0x78>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a11      	ldr	r2, [pc, #68]	; (80005fc <MX_GPIO_Init+0x78>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_GPIO_Init+0x78>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2103      	movs	r1, #3
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d2:	f001 fbab 	bl	8001d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005d6:	2303      	movs	r3, #3
 80005d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	4619      	mov	r1, r3
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f001 fa1a 	bl	8001a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f4:	bf00      	nop
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000

08000600 <HAL_FDCAN_TxFifoEmptyCallback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    if (hfdcan == &hfdcan1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a06      	ldr	r2, [pc, #24]	; (8000624 <HAL_FDCAN_TxFifoEmptyCallback+0x24>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d105      	bne.n	800061c <HAL_FDCAN_TxFifoEmptyCallback+0x1c>
    {
        /* TODO */
        HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_TX_FIFO_EMPTY , 0);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <HAL_FDCAN_TxFifoEmptyCallback+0x24>)
 8000618:	f000 feb4 	bl	8001384 <HAL_FDCAN_ActivateNotification>
    }
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000038 	.word	0x20000038

08000628 <HAL_FDCAN_RxFifo0Callback>:
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	2b00      	cmp	r3, #0
 800063a:	d014      	beq.n	8000666 <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <HAL_FDCAN_RxFifo0Callback+0x48>)
 800063e:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 fd96 	bl	8001174 <HAL_FDCAN_GetRxMessage>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
      Error_Handler();
 800064e:	f000 f813 	bl	8000678 <Error_Handler>
    }
    if (RxData[0]==0x10)
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b10      	cmp	r3, #16
 8000658:	d105      	bne.n	8000666 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2101      	movs	r1, #1
 800065e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000662:	f001 fb63 	bl	8001d2c <HAL_GPIO_WritePin>
    }

  }
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000164 	.word	0x20000164
 8000674:	2000013c 	.word	0x2000013c

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2101      	movs	r1, #1
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f001 fb50 	bl	8001d2c <HAL_GPIO_WritePin>
 800068c:	e7f8      	b.n	8000680 <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_MspInit+0x44>)
 8000698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_MspInit+0x44>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6613      	str	r3, [r2, #96]	; 0x60
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_MspInit+0x44>)
 80006a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_MspInit+0x44>)
 80006b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <HAL_MspInit+0x44>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b8:	6593      	str	r3, [r2, #88]	; 0x58
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_MspInit+0x44>)
 80006bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006c6:	f001 fbed 	bl	8001ea4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b0a0      	sub	sp, #128	; 0x80
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f0:	f107 0318 	add.w	r3, r7, #24
 80006f4:	2254      	movs	r2, #84	; 0x54
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fb27 	bl	8002d4c <memset>
  if(hfdcan->Instance==FDCAN1)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a50      	ldr	r2, [pc, #320]	; (8000844 <HAL_FDCAN_MspInit+0x16c>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d14b      	bne.n	80007a0 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800070e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000712:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000714:	f107 0318 	add.w	r3, r7, #24
 8000718:	4618      	mov	r0, r3
 800071a:	f002 f8c9 	bl	80028b0 <HAL_RCCEx_PeriphCLKConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000724:	f7ff ffa8 	bl	8000678 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000728:	4b47      	ldr	r3, [pc, #284]	; (8000848 <HAL_FDCAN_MspInit+0x170>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a46      	ldr	r2, [pc, #280]	; (8000848 <HAL_FDCAN_MspInit+0x170>)
 8000730:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000732:	4b45      	ldr	r3, [pc, #276]	; (8000848 <HAL_FDCAN_MspInit+0x170>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d10b      	bne.n	8000752 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800073a:	4b44      	ldr	r3, [pc, #272]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	4a43      	ldr	r2, [pc, #268]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 8000740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000744:	6593      	str	r3, [r2, #88]	; 0x58
 8000746:	4b41      	ldr	r3, [pc, #260]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a3d      	ldr	r2, [pc, #244]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b3b      	ldr	r3, [pc, #236]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800076a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800076e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800077c:	2309      	movs	r3, #9
 800077e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000784:	4619      	mov	r1, r3
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f001 f94d 	bl	8001a28 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	2015      	movs	r0, #21
 8000794:	f000 fa25 	bl	8000be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000798:	2015      	movs	r0, #21
 800079a:	f000 fa3c 	bl	8000c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800079e:	e04d      	b.n	800083c <HAL_FDCAN_MspInit+0x164>
  else if(hfdcan->Instance==FDCAN2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a2a      	ldr	r2, [pc, #168]	; (8000850 <HAL_FDCAN_MspInit+0x178>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d148      	bne.n	800083c <HAL_FDCAN_MspInit+0x164>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80007b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007b4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 f878 	bl	80028b0 <HAL_RCCEx_PeriphCLKConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 80007c6:	f7ff ff57 	bl	8000678 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <HAL_FDCAN_MspInit+0x170>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <HAL_FDCAN_MspInit+0x170>)
 80007d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <HAL_FDCAN_MspInit+0x170>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d10b      	bne.n	80007f4 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 80007de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e0:	4a1a      	ldr	r2, [pc, #104]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 80007e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007e6:	6593      	str	r3, [r2, #88]	; 0x58
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 80007ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 80007fa:	f043 0302 	orr.w	r3, r3, #2
 80007fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_FDCAN_MspInit+0x174>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000804:	f003 0302 	and.w	r3, r3, #2
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800080c:	2360      	movs	r3, #96	; 0x60
 800080e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800081c:	2309      	movs	r3, #9
 800081e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000824:	4619      	mov	r1, r3
 8000826:	480b      	ldr	r0, [pc, #44]	; (8000854 <HAL_FDCAN_MspInit+0x17c>)
 8000828:	f001 f8fe 	bl	8001a28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	2056      	movs	r0, #86	; 0x56
 8000832:	f000 f9d6 	bl	8000be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8000836:	2056      	movs	r0, #86	; 0x56
 8000838:	f000 f9ed 	bl	8000c16 <HAL_NVIC_EnableIRQ>
}
 800083c:	bf00      	nop
 800083e:	3780      	adds	r7, #128	; 0x80
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40006400 	.word	0x40006400
 8000848:	20000174 	.word	0x20000174
 800084c:	40021000 	.word	0x40021000
 8000850:	40006800 	.word	0x40006800
 8000854:	48000400 	.word	0x48000400

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f8a4 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <FDCAN1_IT0_IRQHandler+0x10>)
 80008b2:	f000 fe4d 	bl	8001550 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000038 	.word	0x20000038

080008c0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <FDCAN2_IT0_IRQHandler+0x10>)
 80008c6:	f000 fe43 	bl	8001550 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000009c 	.word	0x2000009c

080008d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff ffea 	bl	80008d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	; (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <LoopForever+0xe>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	; (8000944 <LoopForever+0x16>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f002 fa19 	bl	8002d5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092a:	f7ff fc75 	bl	8000218 <main>

0800092e <LoopForever>:

LoopForever:
    b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   r0, =_estack
 8000930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800093c:	08002de4 	.word	0x08002de4
  ldr r2, =_sbss
 8000940:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000944:	2000017c 	.word	0x2000017c

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>

0800094a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f939 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095a:	2000      	movs	r0, #0
 800095c:	f000 f80e 	bl	800097c <HAL_InitTick>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d002      	beq.n	800096c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	71fb      	strb	r3, [r7, #7]
 800096a:	e001      	b.n	8000970 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800096c:	f7ff fe90 	bl	8000690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000970:	79fb      	ldrb	r3, [r7, #7]

}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000984:	2300      	movs	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <HAL_InitTick+0x68>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d022      	beq.n	80009d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_InitTick+0x6c>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <HAL_InitTick+0x68>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800099c:	fbb1 f3f3 	udiv	r3, r1, r3
 80009a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f944 	bl	8000c32 <HAL_SYSTICK_Config>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d10f      	bne.n	80009d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	d809      	bhi.n	80009ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b6:	2200      	movs	r2, #0
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	f04f 30ff 	mov.w	r0, #4294967295
 80009be:	f000 f910 	bl	8000be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_InitTick+0x70>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	e007      	b.n	80009da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e004      	b.n	80009da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
 80009d4:	e001      	b.n	80009da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000018 	.word	0x20000018
 80009e8:	20000010 	.word	0x20000010
 80009ec:	20000014 	.word	0x20000014

080009f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x1c>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x20>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <HAL_IncTick+0x1c>)
 8000a00:	6013      	str	r3, [r2, #0]
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	20000178 	.word	0x20000178
 8000a10:	20000018 	.word	0x20000018

08000a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000178 	.word	0x20000178

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db0b      	blt.n	8000aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	f003 021f 	and.w	r2, r3, #31
 8000aa8:	4907      	ldr	r1, [pc, #28]	; (8000ac8 <__NVIC_EnableIRQ+0x38>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	; 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b98:	d301      	bcc.n	8000b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00f      	b.n	8000bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <SysTick_Config+0x40>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f7ff ff8e 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff29 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf0:	f7ff ff40 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff90 	bl	8000b20 <NVIC_EncodePriority>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff5f 	bl	8000acc <__NVIC_SetPriority>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff33 	bl	8000a90 <__NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffa4 	bl	8000b88 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e147      	b.n	8000eee <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d106      	bne.n	8000c78 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff fd30 	bl	80006d8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	699a      	ldr	r2, [r3, #24]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f022 0210 	bic.w	r2, r2, #16
 8000c86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c88:	f7ff fec4 	bl	8000a14 <HAL_GetTick>
 8000c8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c8e:	e012      	b.n	8000cb6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c90:	f7ff fec0 	bl	8000a14 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b0a      	cmp	r3, #10
 8000c9c:	d90b      	bls.n	8000cb6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca2:	f043 0201 	orr.w	r2, r3, #1
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2203      	movs	r2, #3
 8000cae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e11b      	b.n	8000eee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	d0e5      	beq.n	8000c90 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	699a      	ldr	r2, [r3, #24]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f042 0201 	orr.w	r2, r2, #1
 8000cd2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd4:	f7ff fe9e 	bl	8000a14 <HAL_GetTick>
 8000cd8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000cda:	e012      	b.n	8000d02 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000cdc:	f7ff fe9a 	bl	8000a14 <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b0a      	cmp	r3, #10
 8000ce8:	d90b      	bls.n	8000d02 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	f043 0201 	orr.w	r2, r3, #1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e0f5      	b.n	8000eee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0e5      	beq.n	8000cdc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	699a      	ldr	r2, [r3, #24]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0202 	orr.w	r2, r2, #2
 8000d1e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a74      	ldr	r2, [pc, #464]	; (8000ef8 <HAL_FDCAN_Init+0x2ac>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d103      	bne.n	8000d32 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000d2a:	4a74      	ldr	r2, [pc, #464]	; (8000efc <HAL_FDCAN_Init+0x2b0>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7c1b      	ldrb	r3, [r3, #16]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d108      	bne.n	8000d4c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	699a      	ldr	r2, [r3, #24]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d48:	619a      	str	r2, [r3, #24]
 8000d4a:	e007      	b.n	8000d5c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	699a      	ldr	r2, [r3, #24]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d5a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7c5b      	ldrb	r3, [r3, #17]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d108      	bne.n	8000d76 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	699a      	ldr	r2, [r3, #24]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d72:	619a      	str	r2, [r3, #24]
 8000d74:	e007      	b.n	8000d86 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	699a      	ldr	r2, [r3, #24]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d84:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7c9b      	ldrb	r3, [r3, #18]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d108      	bne.n	8000da0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	699a      	ldr	r2, [r3, #24]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d9c:	619a      	str	r2, [r3, #24]
 8000d9e:	e007      	b.n	8000db0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	699a      	ldr	r2, [r3, #24]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000dae:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	699a      	ldr	r2, [r3, #24]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000dd4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0210 	bic.w	r2, r2, #16
 8000de4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d108      	bne.n	8000e00 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	699a      	ldr	r2, [r3, #24]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f042 0204 	orr.w	r2, r2, #4
 8000dfc:	619a      	str	r2, [r3, #24]
 8000dfe:	e02c      	b.n	8000e5a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d028      	beq.n	8000e5a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d01c      	beq.n	8000e4a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	699a      	ldr	r2, [r3, #24]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e1e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0210 	orr.w	r2, r2, #16
 8000e2e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d110      	bne.n	8000e5a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	699a      	ldr	r2, [r3, #24]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0220 	orr.w	r2, r2, #32
 8000e46:	619a      	str	r2, [r3, #24]
 8000e48:	e007      	b.n	8000e5a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	699a      	ldr	r2, [r3, #24]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 0220 	orr.w	r2, r2, #32
 8000e58:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e6a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e72:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e82:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e84:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e8e:	d115      	bne.n	8000ebc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e9e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000ea8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000eb8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000eba:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fcc0 	bl	8001858 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40006400 	.word	0x40006400
 8000efc:	40006500 	.word	0x40006500

08000f00 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000f10:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d002      	beq.n	8000f1e <HAL_FDCAN_ConfigFilter+0x1e>
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d13d      	bne.n	8000f9a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d119      	bne.n	8000f5a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f32:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000f3a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e01d      	b.n	8000f96 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	075a      	lsls	r2, r3, #29
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	079a      	lsls	r2, r3, #30
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4413      	add	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e006      	b.n	8000fa8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	f043 0202 	orr.w	r2, r3, #2
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
  }
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d116      	bne.n	8000ffc <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fd6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	011a      	lsls	r2, r3, #4
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	431a      	orrs	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e006      	b.n	800100a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001000:	f043 0204 	orr.w	r2, r3, #4
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
  }
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8001016:	b480      	push	{r7}
 8001018:	b085      	sub	sp, #20
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	0219      	lsls	r1, r3, #8
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	430a      	orrs	r2, r1
 800103a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	e006      	b.n	800104e <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001044:	f043 0204 	orr.w	r2, r3, #4
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
  }
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d109      	bne.n	8001082 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800107c:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e006      	b.n	8001090 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	f043 0204 	orr.w	r2, r3, #4
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
  }
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d110      	bne.n	80010d2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2202      	movs	r2, #2
 80010b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	699a      	ldr	r2, [r3, #24]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0201 	bic.w	r2, r2, #1
 80010c6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e006      	b.n	80010e0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	f043 0204 	orr.w	r2, r3, #4
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
  }
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d12c      	bne.n	800115e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001118:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e023      	b.n	800116c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800112c:	0c1b      	lsrs	r3, r3, #16
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 fbf8 	bl	8001930 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
 800114c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001150:	2201      	movs	r2, #1
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	409a      	lsls	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e006      	b.n	800116c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001162:	f043 0208 	orr.w	r2, r3, #8
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
  }
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001174:	b480      	push	{r7}
 8001176:	b08b      	sub	sp, #44	; 0x2c
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800118c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800118e:	7efb      	ldrb	r3, [r7, #27]
 8001190:	2b02      	cmp	r3, #2
 8001192:	f040 80e8 	bne.w	8001366 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	2b40      	cmp	r3, #64	; 0x40
 800119a:	d137      	bne.n	800120c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0db      	b.n	8001374 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c4:	0e1b      	lsrs	r3, r3, #24
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d10a      	bne.n	80011e4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011d6:	0a5b      	lsrs	r3, r3, #9
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	4413      	add	r3, r2
 80011f6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	4613      	mov	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	e036      	b.n	800127a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	2b00      	cmp	r3, #0
 800121a:	d107      	bne.n	800122c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001220:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0a3      	b.n	8001374 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001234:	0e1b      	lsrs	r3, r3, #24
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10a      	bne.n	8001254 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001250:	2301      	movs	r3, #1
 8001252:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	4413      	add	r3, r2
 8001266:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	4613      	mov	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d107      	bne.n	800129e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	0c9b      	lsrs	r3, r3, #18
 8001294:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e005      	b.n	80012aa <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	3304      	adds	r3, #4
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0c1b      	lsrs	r3, r3, #16
 80012d8:	f003 020f 	and.w	r2, r3, #15
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	0e1b      	lsrs	r3, r3, #24
 80012fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	0fda      	lsrs	r2, r3, #31
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	3304      	adds	r3, #4
 8001314:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
 800131e:	e00a      	b.n	8001336 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	441a      	add	r2, r3
 8001326:	6839      	ldr	r1, [r7, #0]
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	440b      	add	r3, r1
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	3301      	adds	r3, #1
 8001334:	623b      	str	r3, [r7, #32]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <HAL_FDCAN_GetRxMessage+0x20c>)
 800133c:	5cd3      	ldrb	r3, [r2, r3]
 800133e:	461a      	mov	r2, r3
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	4293      	cmp	r3, r2
 8001344:	d3ec      	bcc.n	8001320 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b40      	cmp	r3, #64	; 0x40
 800134a:	d105      	bne.n	8001358 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001356:	e004      	b.n	8001362 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e006      	b.n	8001374 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136a:	f043 0208 	orr.w	r2, r3, #8
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
  }
}
 8001374:	4618      	mov	r0, r3
 8001376:	372c      	adds	r7, #44	; 0x2c
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	08002dcc 	.word	0x08002dcc

08001384 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001396:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d003      	beq.n	80013a6 <HAL_FDCAN_ActivateNotification+0x22>
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	f040 80c8 	bne.w	8001536 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d03b      	beq.n	800143a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d031      	beq.n	800143a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d027      	beq.n	800143a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d01d      	beq.n	800143a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	d013      	beq.n	800143a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	2b00      	cmp	r3, #0
 8001424:	d009      	beq.n	800143a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00c      	beq.n	800144a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001436:	2b00      	cmp	r3, #0
 8001438:	d107      	bne.n	800144a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 0201 	orr.w	r2, r2, #1
 8001448:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d13b      	bne.n	80014d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d131      	bne.n	80014d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	2b00      	cmp	r3, #0
 8001484:	d127      	bne.n	80014d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d11d      	bne.n	80014d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d113      	bne.n	80014d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00c      	beq.n	80014e6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0202 	orr.w	r2, r2, #2
 80014e4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d009      	beq.n	8001504 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	430a      	orrs	r2, r1
 8001500:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	430a      	orrs	r2, r1
 800151e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	430a      	orrs	r2, r1
 8001530:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e006      	b.n	8001544 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153a:	f043 0202 	orr.w	r2, r3, #2
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
  }
}
 8001544:	4618      	mov	r0, r3
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08c      	sub	sp, #48	; 0x30
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800155e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800156c:	4013      	ands	r3, r2
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001584:	4013      	ands	r3, r2
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159c:	4013      	ands	r3, r2
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80015aa:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b2:	6a3a      	ldr	r2, [r7, #32]
 80015b4:	4013      	ands	r3, r2
 80015b6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015c2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015de:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2240      	movs	r2, #64	; 0x40
 80015fa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f90c 	bl	800181a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d019      	beq.n	8001640 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d014      	beq.n	8001640 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800161e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001636:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001638:	6939      	ldr	r1, [r7, #16]
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f8ce 	bl	80017dc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800164e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f8a2 	bl	800179a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	2b00      	cmp	r3, #0
 800165a:	d007      	beq.n	800166c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001662:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7fe ffde 	bl	8000628 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001678:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800167a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f897 	bl	80017b0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00c      	beq.n	80016a6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7fe ffad 	bl	8000600 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d018      	beq.n	80016e2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d013      	beq.n	80016e2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016c2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80016da:	68f9      	ldr	r1, [r7, #12]
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f872 	bl	80017c6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00c      	beq.n	8001706 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016fe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f876 	bl	80017f2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00c      	beq.n	800172a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001722:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f86e 	bl	8001806 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00f      	beq.n	8001754 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00a      	beq.n	8001754 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001746:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001762:	69f9      	ldr	r1, [r7, #28]
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f86c 	bl	8001842 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d009      	beq.n	8001784 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6a3a      	ldr	r2, [r7, #32]
 8001776:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f84e 	bl	800182e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001792:	bf00      	nop
 8001794:	3730      	adds	r7, #48	; 0x30
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001862:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d103      	bne.n	8001876 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001874:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2c      	ldr	r2, [pc, #176]	; (800192c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d103      	bne.n	8001888 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001886:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001896:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189e:	041a      	lsls	r2, r3, #16
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018bc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	061a      	lsls	r2, r3, #24
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e005      	b.n	800190a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3304      	adds	r3, #4
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	429a      	cmp	r2, r3
 8001914:	d3f3      	bcc.n	80018fe <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001916:	bf00      	nop
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	4000a400 	.word	0x4000a400
 8001928:	40006800 	.word	0x40006800
 800192c:	40006c00 	.word	0x40006c00

08001930 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10a      	bne.n	800195c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800194e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001956:	4313      	orrs	r3, r2
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	e00a      	b.n	8001972 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001964:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800196a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800196c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001970:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800197c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001982:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001988:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	3304      	adds	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	3304      	adds	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e020      	b.n	8001a06 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3303      	adds	r3, #3
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3302      	adds	r3, #2
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	440b      	add	r3, r1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019dc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	440b      	add	r3, r1
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80019ea:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	440a      	add	r2, r1
 80019f2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80019f4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	3304      	adds	r3, #4
 80019fe:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3304      	adds	r3, #4
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <FDCAN_CopyMessageToRAM+0xf4>)
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d3d6      	bcc.n	80019c4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	3724      	adds	r7, #36	; 0x24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	08002dcc 	.word	0x08002dcc

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a36:	e15a      	b.n	8001cee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 814c 	beq.w	8001ce8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d005      	beq.n	8001a68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 0201 	and.w	r2, r3, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d017      	beq.n	8001b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d123      	bne.n	8001b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	6939      	ldr	r1, [r7, #16]
 8001b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0203 	and.w	r2, r3, #3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80a6 	beq.w	8001ce8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9c:	4b5b      	ldr	r3, [pc, #364]	; (8001d0c <HAL_GPIO_Init+0x2e4>)
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	4a5a      	ldr	r2, [pc, #360]	; (8001d0c <HAL_GPIO_Init+0x2e4>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba8:	4b58      	ldr	r3, [pc, #352]	; (8001d0c <HAL_GPIO_Init+0x2e4>)
 8001baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb4:	4a56      	ldr	r2, [pc, #344]	; (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bde:	d01f      	beq.n	8001c20 <HAL_GPIO_Init+0x1f8>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a4c      	ldr	r2, [pc, #304]	; (8001d14 <HAL_GPIO_Init+0x2ec>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d019      	beq.n	8001c1c <HAL_GPIO_Init+0x1f4>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a4b      	ldr	r2, [pc, #300]	; (8001d18 <HAL_GPIO_Init+0x2f0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <HAL_GPIO_Init+0x1f0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a4a      	ldr	r2, [pc, #296]	; (8001d1c <HAL_GPIO_Init+0x2f4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00d      	beq.n	8001c14 <HAL_GPIO_Init+0x1ec>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a49      	ldr	r2, [pc, #292]	; (8001d20 <HAL_GPIO_Init+0x2f8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d007      	beq.n	8001c10 <HAL_GPIO_Init+0x1e8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a48      	ldr	r2, [pc, #288]	; (8001d24 <HAL_GPIO_Init+0x2fc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_GPIO_Init+0x1e4>
 8001c08:	2305      	movs	r3, #5
 8001c0a:	e00a      	b.n	8001c22 <HAL_GPIO_Init+0x1fa>
 8001c0c:	2306      	movs	r3, #6
 8001c0e:	e008      	b.n	8001c22 <HAL_GPIO_Init+0x1fa>
 8001c10:	2304      	movs	r3, #4
 8001c12:	e006      	b.n	8001c22 <HAL_GPIO_Init+0x1fa>
 8001c14:	2303      	movs	r3, #3
 8001c16:	e004      	b.n	8001c22 <HAL_GPIO_Init+0x1fa>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e002      	b.n	8001c22 <HAL_GPIO_Init+0x1fa>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_GPIO_Init+0x1fa>
 8001c20:	2300      	movs	r3, #0
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	f002 0203 	and.w	r2, r2, #3
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	4093      	lsls	r3, r2
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c32:	4937      	ldr	r1, [pc, #220]	; (8001d10 <HAL_GPIO_Init+0x2e8>)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c40:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c64:	4a30      	ldr	r2, [pc, #192]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c8e:	4a26      	ldr	r2, [pc, #152]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cb8:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ce2:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <HAL_GPIO_Init+0x300>)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f47f ae9d 	bne.w	8001a38 <HAL_GPIO_Init+0x10>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010000 	.word	0x40010000
 8001d14:	48000400 	.word	0x48000400
 8001d18:	48000800 	.word	0x48000800
 8001d1c:	48000c00 	.word	0x48000c00
 8001d20:	48001000 	.word	0x48001000
 8001d24:	48001400 	.word	0x48001400
 8001d28:	40010400 	.word	0x40010400

08001d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d3c:	787b      	ldrb	r3, [r7, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d141      	bne.n	8001dee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d6a:	4b4b      	ldr	r3, [pc, #300]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d76:	d131      	bne.n	8001ddc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d78:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d7e:	4a46      	ldr	r2, [pc, #280]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d88:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d90:	4a41      	ldr	r2, [pc, #260]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d98:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2232      	movs	r2, #50	; 0x32
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9b      	lsrs	r3, r3, #18
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dae:	e002      	b.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d102      	bne.n	8001dca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f2      	bne.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dca:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd6:	d158      	bne.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e057      	b.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ddc:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001de2:	4a2d      	ldr	r2, [pc, #180]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dec:	e04d      	b.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df4:	d141      	bne.n	8001e7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e02:	d131      	bne.n	8001e68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e0a:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2232      	movs	r2, #50	; 0x32
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	0c9b      	lsrs	r3, r3, #18
 8001e36:	3301      	adds	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e3a:	e002      	b.n	8001e42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4e:	d102      	bne.n	8001e56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f2      	bne.n	8001e3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e62:	d112      	bne.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e011      	b.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e78:	e007      	b.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	431bde83 	.word	0x431bde83

08001ea4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb2:	6093      	str	r3, [r2, #8]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e2fe      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d075      	beq.n	8001fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee2:	4b97      	ldr	r3, [pc, #604]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eec:	4b94      	ldr	r3, [pc, #592]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_OscConfig+0x3e>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_OscConfig+0x44>
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d10b      	bne.n	8001f20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	4b8d      	ldr	r3, [pc, #564]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d05b      	beq.n	8001fcc <HAL_RCC_OscConfig+0x108>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d157      	bne.n	8001fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e2d9      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x74>
 8001f2a:	4b85      	ldr	r3, [pc, #532]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a84      	ldr	r2, [pc, #528]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e01d      	b.n	8001f74 <HAL_RCC_OscConfig+0xb0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x98>
 8001f42:	4b7f      	ldr	r3, [pc, #508]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a7e      	ldr	r2, [pc, #504]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b7c      	ldr	r3, [pc, #496]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7b      	ldr	r2, [pc, #492]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e00b      	b.n	8001f74 <HAL_RCC_OscConfig+0xb0>
 8001f5c:	4b78      	ldr	r3, [pc, #480]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a77      	ldr	r2, [pc, #476]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b75      	ldr	r3, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a74      	ldr	r2, [pc, #464]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d013      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fd4a 	bl	8000a14 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7fe fd46 	bl	8000a14 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e29e      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f96:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0xc0>
 8001fa2:	e014      	b.n	8001fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fd36 	bl	8000a14 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7fe fd32 	bl	8000a14 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e28a      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fbe:	4b60      	ldr	r3, [pc, #384]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0xe8>
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d075      	beq.n	80020c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fda:	4b59      	ldr	r3, [pc, #356]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe4:	4b56      	ldr	r3, [pc, #344]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b0c      	cmp	r3, #12
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_OscConfig+0x136>
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d002      	beq.n	8002000 <HAL_RCC_OscConfig+0x13c>
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d11f      	bne.n	8002040 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002000:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_OscConfig+0x154>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e25d      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b49      	ldr	r3, [pc, #292]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	4946      	ldr	r1, [pc, #280]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800202c:	4b45      	ldr	r3, [pc, #276]	; (8002144 <HAL_RCC_OscConfig+0x280>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fca3 	bl	800097c <HAL_InitTick>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d043      	beq.n	80020c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e249      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d023      	beq.n	8002090 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3c      	ldr	r2, [pc, #240]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 800204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7fe fcde 	bl	8000a14 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205c:	f7fe fcda 	bl	8000a14 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e232      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800206e:	4b34      	ldr	r3, [pc, #208]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b31      	ldr	r3, [pc, #196]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	061b      	lsls	r3, r3, #24
 8002088:	492d      	ldr	r1, [pc, #180]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
 800208e:	e01a      	b.n	80020c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a2a      	ldr	r2, [pc, #168]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8002096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe fcba 	bl	8000a14 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a4:	f7fe fcb6 	bl	8000a14 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e20e      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1e0>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d041      	beq.n	8002156 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01c      	beq.n	8002114 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 80020dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e0:	4a17      	ldr	r2, [pc, #92]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7fe fc93 	bl	8000a14 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f2:	f7fe fc8f 	bl	8000a14 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1e7      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8002106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0ef      	beq.n	80020f2 <HAL_RCC_OscConfig+0x22e>
 8002112:	e020      	b.n	8002156 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 8002116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <HAL_RCC_OscConfig+0x27c>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7fe fc76 	bl	8000a14 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800212a:	e00d      	b.n	8002148 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212c:	f7fe fc72 	bl	8000a14 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d906      	bls.n	8002148 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1ca      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002148:	4b8c      	ldr	r3, [pc, #560]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1ea      	bne.n	800212c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80a6 	beq.w	80022b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002168:	4b84      	ldr	r3, [pc, #528]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_OscConfig+0x2b4>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x2b6>
 8002178:	2300      	movs	r3, #0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00d      	beq.n	800219a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b7f      	ldr	r3, [pc, #508]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	4a7e      	ldr	r2, [pc, #504]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
 800218a:	4b7c      	ldr	r3, [pc, #496]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002196:	2301      	movs	r3, #1
 8002198:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219a:	4b79      	ldr	r3, [pc, #484]	; (8002380 <HAL_RCC_OscConfig+0x4bc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a6:	4b76      	ldr	r3, [pc, #472]	; (8002380 <HAL_RCC_OscConfig+0x4bc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a75      	ldr	r2, [pc, #468]	; (8002380 <HAL_RCC_OscConfig+0x4bc>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b2:	f7fe fc2f 	bl	8000a14 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7fe fc2b 	bl	8000a14 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e183      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021cc:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <HAL_RCC_OscConfig+0x4bc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d108      	bne.n	80021f2 <HAL_RCC_OscConfig+0x32e>
 80021e0:	4b66      	ldr	r3, [pc, #408]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	4a65      	ldr	r2, [pc, #404]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021f0:	e024      	b.n	800223c <HAL_RCC_OscConfig+0x378>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d110      	bne.n	800221c <HAL_RCC_OscConfig+0x358>
 80021fa:	4b60      	ldr	r3, [pc, #384]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	4a5e      	ldr	r2, [pc, #376]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800220a:	4b5c      	ldr	r3, [pc, #368]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	4a5a      	ldr	r2, [pc, #360]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800221a:	e00f      	b.n	800223c <HAL_RCC_OscConfig+0x378>
 800221c:	4b57      	ldr	r3, [pc, #348]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	4a56      	ldr	r2, [pc, #344]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800222c:	4b53      	ldr	r3, [pc, #332]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002232:	4a52      	ldr	r2, [pc, #328]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d016      	beq.n	8002272 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7fe fbe6 	bl	8000a14 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224a:	e00a      	b.n	8002262 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224c:	f7fe fbe2 	bl	8000a14 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e138      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002262:	4b46      	ldr	r3, [pc, #280]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ed      	beq.n	800224c <HAL_RCC_OscConfig+0x388>
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7fe fbcf 	bl	8000a14 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7fe fbcb 	bl	8000a14 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e121      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002290:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1ed      	bne.n	800227a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800229e:	7ffb      	ldrb	r3, [r7, #31]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	4b35      	ldr	r3, [pc, #212]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4a34      	ldr	r2, [pc, #208]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 80022aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d03c      	beq.n	8002336 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01c      	beq.n	80022fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022c4:	4b2d      	ldr	r3, [pc, #180]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 80022c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022ca:	4a2c      	ldr	r2, [pc, #176]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7fe fb9e 	bl	8000a14 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022dc:	f7fe fb9a 	bl	8000a14 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0f2      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ee:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 80022f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ef      	beq.n	80022dc <HAL_RCC_OscConfig+0x418>
 80022fc:	e01b      	b.n	8002336 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022fe:	4b1f      	ldr	r3, [pc, #124]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230e:	f7fe fb81 	bl	8000a14 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002316:	f7fe fb7d 	bl	8000a14 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e0d5      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 800232a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1ef      	bne.n	8002316 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80c9 	beq.w	80024d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b0c      	cmp	r3, #12
 800234a:	f000 8083 	beq.w	8002454 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d15e      	bne.n	8002414 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a08      	ldr	r2, [pc, #32]	; (800237c <HAL_RCC_OscConfig+0x4b8>)
 800235c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe fb57 	bl	8000a14 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002368:	e00c      	b.n	8002384 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe fb53 	bl	8000a14 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d905      	bls.n	8002384 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0ab      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
 800237c:	40021000 	.word	0x40021000
 8002380:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002384:	4b55      	ldr	r3, [pc, #340]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ec      	bne.n	800236a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002390:	4b52      	ldr	r3, [pc, #328]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	4b52      	ldr	r3, [pc, #328]	; (80024e0 <HAL_RCC_OscConfig+0x61c>)
 8002396:	4013      	ands	r3, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6a11      	ldr	r1, [r2, #32]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023a0:	3a01      	subs	r2, #1
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	4311      	orrs	r1, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80023aa:	0212      	lsls	r2, r2, #8
 80023ac:	4311      	orrs	r1, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023b2:	0852      	lsrs	r2, r2, #1
 80023b4:	3a01      	subs	r2, #1
 80023b6:	0552      	lsls	r2, r2, #21
 80023b8:	4311      	orrs	r1, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023be:	0852      	lsrs	r2, r2, #1
 80023c0:	3a01      	subs	r2, #1
 80023c2:	0652      	lsls	r2, r2, #25
 80023c4:	4311      	orrs	r1, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023ca:	06d2      	lsls	r2, r2, #27
 80023cc:	430a      	orrs	r2, r1
 80023ce:	4943      	ldr	r1, [pc, #268]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d4:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a40      	ldr	r2, [pc, #256]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023e0:	4b3e      	ldr	r3, [pc, #248]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4a3d      	ldr	r2, [pc, #244]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 80023e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fb12 	bl	8000a14 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe fb0e 	bl	8000a14 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e066      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002406:	4b35      	ldr	r3, [pc, #212]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x530>
 8002412:	e05e      	b.n	80024d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002414:	4b31      	ldr	r3, [pc, #196]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a30      	ldr	r2, [pc, #192]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 800241a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800241e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe faf8 	bl	8000a14 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7fe faf4 	bl	8000a14 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e04c      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800243a:	4b28      	ldr	r3, [pc, #160]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002446:	4b25      	ldr	r3, [pc, #148]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	4924      	ldr	r1, [pc, #144]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <HAL_RCC_OscConfig+0x620>)
 800244e:	4013      	ands	r3, r2
 8002450:	60cb      	str	r3, [r1, #12]
 8002452:	e03e      	b.n	80024d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e039      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_RCC_OscConfig+0x618>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 0203 	and.w	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	429a      	cmp	r2, r3
 8002472:	d12c      	bne.n	80024ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	3b01      	subs	r3, #1
 8002480:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d123      	bne.n	80024ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d11b      	bne.n	80024ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d113      	bne.n	80024ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	3b01      	subs	r3, #1
 80024b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d109      	bne.n	80024ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	3b01      	subs	r3, #1
 80024c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	019f800c 	.word	0x019f800c
 80024e4:	feeefffc 	.word	0xfeeefffc

080024e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e11e      	b.n	800273e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002500:	4b91      	ldr	r3, [pc, #580]	; (8002748 <HAL_RCC_ClockConfig+0x260>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d910      	bls.n	8002530 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b8e      	ldr	r3, [pc, #568]	; (8002748 <HAL_RCC_ClockConfig+0x260>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 020f 	bic.w	r2, r3, #15
 8002516:	498c      	ldr	r1, [pc, #560]	; (8002748 <HAL_RCC_ClockConfig+0x260>)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b8a      	ldr	r3, [pc, #552]	; (8002748 <HAL_RCC_ClockConfig+0x260>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e106      	b.n	800273e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d073      	beq.n	8002624 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d129      	bne.n	8002598 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002544:	4b81      	ldr	r3, [pc, #516]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0f4      	b.n	800273e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002554:	f000 f966 	bl	8002824 <RCC_GetSysClockFreqFromPLLSource>
 8002558:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4a7c      	ldr	r2, [pc, #496]	; (8002750 <HAL_RCC_ClockConfig+0x268>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d93f      	bls.n	80025e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002562:	4b7a      	ldr	r3, [pc, #488]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002576:	2b00      	cmp	r3, #0
 8002578:	d033      	beq.n	80025e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d12f      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002582:	4b72      	ldr	r3, [pc, #456]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800258a:	4a70      	ldr	r2, [pc, #448]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 800258c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002590:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e024      	b.n	80025e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0c6      	b.n	800273e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b0:	4b66      	ldr	r3, [pc, #408]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0be      	b.n	800273e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80025c0:	f000 f8ce 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4a61      	ldr	r2, [pc, #388]	; (8002750 <HAL_RCC_ClockConfig+0x268>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d909      	bls.n	80025e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025ce:	4b5f      	ldr	r3, [pc, #380]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025d6:	4a5d      	ldr	r2, [pc, #372]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 80025d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025e2:	4b5a      	ldr	r3, [pc, #360]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f023 0203 	bic.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4957      	ldr	r1, [pc, #348]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f4:	f7fe fa0e 	bl	8000a14 <HAL_GetTick>
 80025f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7fe fa0a 	bl	8000a14 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e095      	b.n	800273e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	4b4e      	ldr	r3, [pc, #312]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 020c 	and.w	r2, r3, #12
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	429a      	cmp	r2, r3
 8002622:	d1eb      	bne.n	80025fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d023      	beq.n	8002678 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a42      	ldr	r2, [pc, #264]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 8002642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002646:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002654:	4b3d      	ldr	r3, [pc, #244]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800265c:	4a3b      	ldr	r2, [pc, #236]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 800265e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002662:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002664:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4936      	ldr	r1, [pc, #216]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
 8002676:	e008      	b.n	800268a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b80      	cmp	r3, #128	; 0x80
 800267c:	d105      	bne.n	800268a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800267e:	4b33      	ldr	r3, [pc, #204]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4a32      	ldr	r2, [pc, #200]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 8002684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002688:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800268a:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <HAL_RCC_ClockConfig+0x260>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d21d      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002698:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <HAL_RCC_ClockConfig+0x260>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 020f 	bic.w	r2, r3, #15
 80026a0:	4929      	ldr	r1, [pc, #164]	; (8002748 <HAL_RCC_ClockConfig+0x260>)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026a8:	f7fe f9b4 	bl	8000a14 <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b0:	f7fe f9b0 	bl	8000a14 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e03b      	b.n	800273e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_RCC_ClockConfig+0x260>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1ed      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4917      	ldr	r1, [pc, #92]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490f      	ldr	r1, [pc, #60]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002712:	f000 f825 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8002716:	4602      	mov	r2, r0
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCC_ClockConfig+0x264>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	490c      	ldr	r1, [pc, #48]	; (8002754 <HAL_RCC_ClockConfig+0x26c>)
 8002724:	5ccb      	ldrb	r3, [r1, r3]
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_RCC_ClockConfig+0x270>)
 8002730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe f920 	bl	800097c <HAL_InitTick>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40022000 	.word	0x40022000
 800274c:	40021000 	.word	0x40021000
 8002750:	04c4b400 	.word	0x04c4b400
 8002754:	08002dbc 	.word	0x08002dbc
 8002758:	20000010 	.word	0x20000010
 800275c:	20000014 	.word	0x20000014

08002760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002766:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b04      	cmp	r3, #4
 8002770:	d102      	bne.n	8002778 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002772:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	e047      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb8>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d102      	bne.n	800278a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002784:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	e03e      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb8>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d136      	bne.n	8002804 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	3301      	adds	r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d10c      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027b4:	4a1a      	ldr	r2, [pc, #104]	; (8002820 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	4a16      	ldr	r2, [pc, #88]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027be:	68d2      	ldr	r2, [r2, #12]
 80027c0:	0a12      	lsrs	r2, r2, #8
 80027c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	617b      	str	r3, [r7, #20]
      break;
 80027cc:	e00c      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ce:	4a13      	ldr	r2, [pc, #76]	; (800281c <HAL_RCC_GetSysClockFreq+0xbc>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	4a10      	ldr	r2, [pc, #64]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d8:	68d2      	ldr	r2, [r2, #12]
 80027da:	0a12      	lsrs	r2, r2, #8
 80027dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
      break;
 80027e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0e5b      	lsrs	r3, r3, #25
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	3301      	adds	r3, #1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	e001      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002808:	693b      	ldr	r3, [r7, #16]
}
 800280a:	4618      	mov	r0, r3
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	00f42400 	.word	0x00f42400
 8002820:	007a1200 	.word	0x007a1200

08002824 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800282a:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3301      	adds	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d10c      	bne.n	8002862 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002848:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002852:	68d2      	ldr	r2, [r2, #12]
 8002854:	0a12      	lsrs	r2, r2, #8
 8002856:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800285a:	fb02 f303 	mul.w	r3, r2, r3
 800285e:	617b      	str	r3, [r7, #20]
    break;
 8002860:	e00c      	b.n	800287c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	fbb2 f3f3 	udiv	r3, r2, r3
 800286a:	4a0e      	ldr	r2, [pc, #56]	; (80028a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800286c:	68d2      	ldr	r2, [r2, #12]
 800286e:	0a12      	lsrs	r2, r2, #8
 8002870:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	617b      	str	r3, [r7, #20]
    break;
 800287a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0e5b      	lsrs	r3, r3, #25
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	3301      	adds	r3, #1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002896:	687b      	ldr	r3, [r7, #4]
}
 8002898:	4618      	mov	r0, r3
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40021000 	.word	0x40021000
 80028a8:	007a1200 	.word	0x007a1200
 80028ac:	00f42400 	.word	0x00f42400

080028b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028b8:	2300      	movs	r3, #0
 80028ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028bc:	2300      	movs	r3, #0
 80028be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8098 	beq.w	80029fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d2:	4b43      	ldr	r3, [pc, #268]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10d      	bne.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	4b40      	ldr	r3, [pc, #256]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	4a3f      	ldr	r2, [pc, #252]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e8:	6593      	str	r3, [r2, #88]	; 0x58
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f6:	2301      	movs	r3, #1
 80028f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028fa:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a39      	ldr	r2, [pc, #228]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002904:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002906:	f7fe f885 	bl	8000a14 <HAL_GetTick>
 800290a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800290c:	e009      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290e:	f7fe f881 	bl	8000a14 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d902      	bls.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	74fb      	strb	r3, [r7, #19]
        break;
 8002920:	e005      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002922:	4b30      	ldr	r3, [pc, #192]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0ef      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d159      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002934:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01e      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	d019      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002950:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800295c:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	4a1b      	ldr	r2, [pc, #108]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800297c:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fe f841 	bl	8000a14 <HAL_GetTick>
 8002992:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002994:	e00b      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe f83d 	bl	8000a14 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d902      	bls.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	74fb      	strb	r3, [r7, #19]
            break;
 80029ac:	e006      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ec      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10b      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d0:	4903      	ldr	r1, [pc, #12]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029d8:	e008      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	74bb      	strb	r3, [r7, #18]
 80029de:	e005      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ec:	7c7b      	ldrb	r3, [r7, #17]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d105      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f2:	4ba7      	ldr	r3, [pc, #668]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	4aa6      	ldr	r2, [pc, #664]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a0a:	4ba1      	ldr	r3, [pc, #644]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	f023 0203 	bic.w	r2, r3, #3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	499d      	ldr	r1, [pc, #628]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a2c:	4b98      	ldr	r3, [pc, #608]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	f023 020c 	bic.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	4995      	ldr	r1, [pc, #596]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a4e:	4b90      	ldr	r3, [pc, #576]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	498c      	ldr	r1, [pc, #560]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a70:	4b87      	ldr	r3, [pc, #540]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	4984      	ldr	r1, [pc, #528]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a92:	4b7f      	ldr	r3, [pc, #508]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	497b      	ldr	r1, [pc, #492]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ab4:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	4973      	ldr	r1, [pc, #460]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ad6:	4b6e      	ldr	r3, [pc, #440]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	496a      	ldr	r1, [pc, #424]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002af8:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	4962      	ldr	r1, [pc, #392]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	4959      	ldr	r1, [pc, #356]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b3c:	4b54      	ldr	r3, [pc, #336]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4a:	4951      	ldr	r1, [pc, #324]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	4948      	ldr	r1, [pc, #288]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d015      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b80:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4940      	ldr	r1, [pc, #256]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b9e:	d105      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4a3a      	ldr	r2, [pc, #232]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002baa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d015      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bb8:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	4932      	ldr	r1, [pc, #200]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd6:	d105      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a2c      	ldr	r2, [pc, #176]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d015      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	4924      	ldr	r1, [pc, #144]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c10:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d015      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c28:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	4916      	ldr	r1, [pc, #88]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c46:	d105      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d019      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4908      	ldr	r1, [pc, #32]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c7e:	d109      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a02      	ldr	r2, [pc, #8]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c8a:	60d3      	str	r3, [r2, #12]
 8002c8c:	e002      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4926      	ldr	r1, [pc, #152]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cc0:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce6:	4918      	ldr	r1, [pc, #96]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d02:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d015      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	490a      	ldr	r1, [pc, #40]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000

08002d4c <memset>:
 8002d4c:	4402      	add	r2, r0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d100      	bne.n	8002d56 <memset+0xa>
 8002d54:	4770      	bx	lr
 8002d56:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5a:	e7f9      	b.n	8002d50 <memset+0x4>

08002d5c <__libc_init_array>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	4d0d      	ldr	r5, [pc, #52]	; (8002d94 <__libc_init_array+0x38>)
 8002d60:	4c0d      	ldr	r4, [pc, #52]	; (8002d98 <__libc_init_array+0x3c>)
 8002d62:	1b64      	subs	r4, r4, r5
 8002d64:	10a4      	asrs	r4, r4, #2
 8002d66:	2600      	movs	r6, #0
 8002d68:	42a6      	cmp	r6, r4
 8002d6a:	d109      	bne.n	8002d80 <__libc_init_array+0x24>
 8002d6c:	4d0b      	ldr	r5, [pc, #44]	; (8002d9c <__libc_init_array+0x40>)
 8002d6e:	4c0c      	ldr	r4, [pc, #48]	; (8002da0 <__libc_init_array+0x44>)
 8002d70:	f000 f818 	bl	8002da4 <_init>
 8002d74:	1b64      	subs	r4, r4, r5
 8002d76:	10a4      	asrs	r4, r4, #2
 8002d78:	2600      	movs	r6, #0
 8002d7a:	42a6      	cmp	r6, r4
 8002d7c:	d105      	bne.n	8002d8a <__libc_init_array+0x2e>
 8002d7e:	bd70      	pop	{r4, r5, r6, pc}
 8002d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d84:	4798      	blx	r3
 8002d86:	3601      	adds	r6, #1
 8002d88:	e7ee      	b.n	8002d68 <__libc_init_array+0xc>
 8002d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8e:	4798      	blx	r3
 8002d90:	3601      	adds	r6, #1
 8002d92:	e7f2      	b.n	8002d7a <__libc_init_array+0x1e>
 8002d94:	08002ddc 	.word	0x08002ddc
 8002d98:	08002ddc 	.word	0x08002ddc
 8002d9c:	08002ddc 	.word	0x08002ddc
 8002da0:	08002de0 	.word	0x08002de0

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	bf00      	nop
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
